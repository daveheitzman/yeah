#!/usr/bin/env ruby

command = ARGV.shift

case command

when 'new'
  require 'fileutils'

  name = ARGV.shift || 'new_game'

  def underscore(string)
    string.split(/(?=[A-Z])/).map(&:downcase).join('_')
  end

  def classify(string)
    string.split(/[_-]/).map(&:capitalize).join
  end

  def titleize(string)
    classify(string).split(/(?=[A-Z])/).join(' ')
  end

  project_path = underscore(name)

  if Dir[project_path].any?
    puts "Error: `#{project_path}` directory already exists."

  elsif name =~ /^\d/
    puts "Error: name cannot start with a number."

  else
    # Use project template for new project directory.
    template_path = File.expand_path('../../lib/yeah/_template', __FILE__)
    FileUtils.cp_r(template_path, project_path)

    # Use classified passed-in name as Game class name.
    game_path = "#{project_path}/code/game.rb"
    File.write(game_path, File.read(game_path) % "#{classify(name)}Game")

    # Use titleized passed-in name as configured game name.
    config_path = "#{project_path}/code/config.rb"
    File.write(config_path, File.read(config_path) % titleize(name))

    puts "Created new game project at `#{project_path}`."
  end

when 'build'
  require 'yeah/web/builder'
  Yeah::Web::Builder.new.build

when 'server'
  
  require 'yeah/web/server'
  port = ARGV.shift || '1234'
  Yeah::Web::Server.new.start(port, {}  ) 

when 'version'
  require 'yeah/version'
  puts Yeah::VERSION

else
  puts "Usage: yeah <command>"
  puts ""
  puts "Commands:"
  puts "  new [name] - create a new game project"
  puts "  build - build package for a game"
  puts "  server [port] - start web server for a game"
  puts "  version - print installed version"
end
